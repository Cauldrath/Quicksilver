// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do one of these:
//
//    using EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels;
//
//    var person = Person.FromJson(jsonString);
//    var address = Address.FromJson(jsonString);
//    var applicablePaymentCard = ApplicablePaymentCard.FromJson(jsonString);
//    var applicablePayment = ApplicablePayment.FromJson(jsonString);
//    var billingAddressOptions = BillingAddressOptions.FromJson(jsonString);
//    var cartQuery = CartQuery.FromJson(jsonString);
//    var image = Image.FromJson(jsonString);
//    var category = Category.FromJson(jsonString);
//    var categoryQuery = CategoryQuery.FromJson(jsonString);
//    var customerAddress = CustomerAddress.FromJson(jsonString);
//    var paymentBankAccount = PaymentBankAccount.FromJson(jsonString);
//    var paymentCard = PaymentCard.FromJson(jsonString);
//    var basePaymentMethod = BasePaymentMethod.FromJson(jsonString);
//    var paymentMethod = PaymentMethod.FromJson(jsonString);
//    var authType = AuthType.FromJson(jsonString);
//    var customerAccount = CustomerAccount.FromJson(jsonString);
//    var customerInfoOptions = CustomerInfoOptions.FromJson(jsonString);
//    var baseGiftOptions = BaseGiftOptions.FromJson(jsonString);
//    var giftOptions = GiftOptions.FromJson(jsonString);
//    var loginOptions = LoginOptions.FromJson(jsonString);
//    var optionValue = OptionValue.FromJson(jsonString);
//    var option = Option.FromJson(jsonString);
//    var payment = Payment.FromJson(jsonString);
//    var productItem = ProductItem.FromJson(jsonString);
//    var shippingMethodPromo = ShippingMethodPromo.FromJson(jsonString);
//    var shippingMethod = ShippingMethod.FromJson(jsonString);
//    var shipment = Shipment.FromJson(jsonString);
//    var order = Order.FromJson(jsonString);
//    var pageable = Pageable.FromJson(jsonString);
//    var sortingOption = SortingOption.FromJson(jsonString);
//    var refinementValue = RefinementValue.FromJson(jsonString);
//    var refinement = Refinement.FromJson(jsonString);
//    var productIndex = ProductIndex.FromJson(jsonString);
//    var productQuery = ProductQuery.FromJson(jsonString);
//    var promo = Promo.FromJson(jsonString);
//    var brandSuggestions = BrandSuggestions.FromJson(jsonString);
//    var brandSuggestion = BrandSuggestion.FromJson(jsonString);
//    var categorySuggestions = CategorySuggestions.FromJson(jsonString);
//    var categorySuggestion = CategorySuggestion.FromJson(jsonString);
//    var productSuggestions = ProductSuggestions.FromJson(jsonString);
//    var productSuggestion = ProductSuggestion.FromJson(jsonString);
//    var searchSuggestion = SearchSuggestion.FromJson(jsonString);
//    var sessionToken = SessionToken.FromJson(jsonString);
//    var shipmentAddressOptions = ShipmentAddressOptions.FromJson(jsonString);
//    var shipmentMethodOptions = ShipmentMethodOptions.FromJson(jsonString);
//    var shippingMethodResponse = ShippingMethodResponse.FromJson(jsonString);
//    var inventory = Inventory.FromJson(jsonString);
//    var variant = Variant.FromJson(jsonString);
//    var baseProduct = BaseProduct.FromJson(jsonString);
//    var product = Product.FromJson(jsonString);
//    var cart = Cart.FromJson(jsonString);
//    var cartItem = CartItem.FromJson(jsonString);
//    var cartPromo = CartPromo.FromJson(jsonString);
//    var currencyValue = CurrencyValue.FromJson(jsonString);
//    var reviewDetails = ReviewDetails.FromJson(jsonString);
//    var review = Review.FromJson(jsonString);
//    var reviewContext = ReviewContext.FromJson(jsonString);
//    var reviewDimension = ReviewDimension.FromJson(jsonString);
//    var reviewBadge = ReviewBadge.FromJson(jsonString);
//    var reviewUser = ReviewUser.FromJson(jsonString);
//    var reviewFeedback = ReviewFeedback.FromJson(jsonString);
//    var reviewStatistics = ReviewStatistics.FromJson(jsonString);
//    var reviewDistribution = ReviewDistribution.FromJson(jsonString);
//    var reviewContextDistribution = ReviewContextDistribution.FromJson(jsonString);
//    var reviewDimensionAverage = ReviewDimensionAverage.FromJson(jsonString);
//    var reviewSummary = ReviewSummary.FromJson(jsonString);

namespace EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Information about a person.
    /// </summary>
    public partial class Person
    {
        /// <summary>
        /// A person's given name.
        /// </summary>
        [JsonProperty("firstName", Required = Required.Always)]
        public string FirstName { get; set; }

        /// <summary>
        /// A person's surname.
        /// </summary>
        [JsonProperty("lastName", Required = Required.Always)]
        public string LastName { get; set; }

        /// <summary>
        /// A term used to address a person.
        /// </summary>
        [JsonProperty("salutation", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Salutation { get; set; }

        /// <summary>
        /// A person's middle name or initial.
        /// </summary>
        [JsonProperty("secondName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string SecondName { get; set; }

        /// <summary>
        /// The suffix of a person's name.
        /// </summary>
        [JsonProperty("suffix", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Suffix { get; set; }
    }

    /// <summary>
    /// Information about a type of payment that is accepted for an order.
    /// </summary>
    public partial class ApplicablePayment
    {
        /// <summary>
        /// An array of card types that are valid for a specific payment type.
        /// </summary>
        [JsonProperty("cards", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<ApplicablePaymentCard> Cards { get; set; }

        /// <summary>
        /// The description of a payment type.
        /// </summary>
        [JsonProperty("description", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// An identifier for the payment type.
        /// </summary>
        [JsonProperty("id", Required = Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// A location for an image used to visually identify a payment type.
        /// </summary>
        [JsonProperty("image", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Image { get; set; }

        /// <summary>
        /// The name of a payment type.
        /// </summary>
        [JsonProperty("name", Required = Required.Always)]
        public string Name { get; set; }
    }

    /// <summary>
    /// Information about a specific card type that is accepted for payment.
    /// </summary>
    public partial class ApplicablePaymentCard
    {
        /// <summary>
        /// The type of a card.
        /// </summary>
        [JsonProperty("cardType", Required = Required.Always)]
        public string CardType { get; set; }

        /// <summary>
        /// Whether checksum verification is enabled for a card.
        /// </summary>
        [JsonProperty("checksumVerificationEnabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool? ChecksumVerificationEnabled { get; set; }

        /// <summary>
        /// A description for a card.
        /// </summary>
        [JsonProperty("description", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// A location for an image to be used to visually identify a card.
        /// </summary>
        [JsonProperty("image", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Image { get; set; }

        /// <summary>
        /// A title for a card.
        /// </summary>
        [JsonProperty("name", Required = Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// An array of valid lengths of account numbers for a card.
        /// </summary>
        [JsonProperty("numberLengths", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<string> NumberLengths { get; set; }

        /// <summary>
        /// An array of numbers that are valid prefixes for a card.
        /// </summary>
        [JsonProperty("numberPrefixes", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<string> NumberPrefixes { get; set; }

        /// <summary>
        /// The length of valid security codes for a card.
        /// </summary>
        [JsonProperty("securityCodeLength", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? SecurityCodeLength { get; set; }
    }

    /// <summary>
    /// Object associating a billing address with a cart. (This is the billing address that will
    /// be used for an order.)
    /// </summary>
    public partial class BillingAddressOptions
    {
        /// <summary>
        /// Metadata about an address to be used as the billing address.
        /// </summary>
        [JsonProperty("address", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Address Address { get; set; }

        /// <summary>
        /// The identifier of an address.
        /// </summary>
        [JsonProperty("addressId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string AddressId { get; set; }

        /// <summary>
        /// The cart identifier for which the specified address will be used as a billing address.
        /// </summary>
        [JsonProperty("cartId", Required = Required.Always)]
        public string CartId { get; set; }

        /// <summary>
        /// Whether the specified address should also be used as the shipping address.
        /// </summary>
        [JsonProperty("useAsShipping", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseAsShipping { get; set; }
    }

    /// <summary>
    /// Information about an address.
    ///
    /// Metadata about an address to be used as the billing address.
    ///
    /// The address of the recipient of the shipment.
    ///
    /// The billing address for the order as specified by the customer.
    ///
    /// Line-item information about an address to be associated with a shipment.
    ///
    /// The billing address associated with an order.
    /// </summary>
    public partial class Address
    {
        /// <summary>
        /// The first line of an address, typically comprised of street number and name.
        /// </summary>
        [JsonProperty("address1", Required = Required.Always)]
        public string Address1 { get; set; }

        /// <summary>
        /// The second line of an address. This is typically P.O. box, apartment number, or similar.
        /// </summary>
        [JsonProperty("address2", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Address2 { get; set; }

        /// <summary>
        /// The city of an address.
        /// </summary>
        [JsonProperty("city", Required = Required.Always)]
        public string City { get; set; }

        /// <summary>
        /// The company name of an address.
        /// </summary>
        [JsonProperty("companyName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string CompanyName { get; set; }

        /// <summary>
        /// The address' two-character ISO 3166 country code.
        /// </summary>
        [JsonProperty("countryCode", Required = Required.Always)]
        public string CountryCode { get; set; }

        /// <summary>
        /// A person's given name.
        /// </summary>
        [JsonProperty("firstName", Required = Required.Always)]
        public string FirstName { get; set; }

        /// <summary>
        /// The full name of a person associated with an address.
        /// </summary>
        [JsonProperty("fullName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string FullName { get; set; }

        /// <summary>
        /// An identifier for an address.
        /// </summary>
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The job title of a person associated with an address.
        /// </summary>
        [JsonProperty("jobTitle", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string JobTitle { get; set; }

        /// <summary>
        /// A person's surname.
        /// </summary>
        [JsonProperty("lastName", Required = Required.Always)]
        public string LastName { get; set; }

        /// <summary>
        /// The phone number of a person associated with an address. This number should not contain
        /// dashes or other formatting characters.
        /// </summary>
        [JsonProperty("phone", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Phone { get; set; }

        /// <summary>
        /// A P.O. box number for an address.
        /// </summary>
        [JsonProperty("postBox", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string PostBox { get; set; }

        /// <summary>
        /// The postal code of an address.
        /// </summary>
        [JsonProperty("postalCode", Required = Required.Always)]
        public string PostalCode { get; set; }

        /// <summary>
        /// A term used to address a person.
        /// </summary>
        [JsonProperty("salutation", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Salutation { get; set; }

        /// <summary>
        /// A person's middle name or initial.
        /// </summary>
        [JsonProperty("secondName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string SecondName { get; set; }

        /// <summary>
        /// Two-digit state code for an address.
        /// </summary>
        [JsonProperty("stateCode", Required = Required.Always)]
        public string StateCode { get; set; }

        /// <summary>
        /// The suffix of a person's name.
        /// </summary>
        [JsonProperty("suffix", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Suffix { get; set; }

        /// <summary>
        /// The suite associated with an address.
        /// </summary>
        [JsonProperty("suite", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Suite { get; set; }

        /// <summary>
        /// A title given to the address, typically used when saving addresses to an account.
        /// </summary>
        [JsonProperty("title", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }
    }

    /// <summary>
    /// An interface that prescribes the options that can be passed into a data source's
    /// fetchCart
    /// method.
    /// </summary>
    public partial class CartQuery
    {
        /// <summary>
        /// Whether to retrieve additional metadata about a cart. This may require making
        /// additional requests beyond retrieving the cart itself. If true, no additional data
        /// will be retrieved.
        /// </summary>
        [JsonProperty("noExtraData", Required = Required.Always)]
        public bool NoExtraData { get; set; }
    }

    /// <summary>
    /// Information about a category. Categories contain sub-categories and/or products.
    /// </summary>
    public partial class Category
    {
        /// <summary>
        /// An array of subcategories.
        /// </summary>
        [JsonProperty("categories", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Category> Categories { get; set; }

        /// <summary>
        /// Identifier indicating the data source that produced the category object. This can be
        /// useful
        /// if an app receives category data from multiple sources (e.g., CMS and Demandware) and
        /// needs
        /// to perform different functionality depending on the source.
        /// </summary>
        [JsonProperty("dataSourceType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string DataSourceType { get; set; }

        /// <summary>
        /// A SEO slug for the category. Used as the human-readable portion of the URL used to
        /// access the category.
        /// </summary>
        [JsonProperty("handle", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Handle { get; set; }

        /// <summary>
        /// A unique identifier for a category.
        /// </summary>
        [JsonProperty("id", Required = Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// A location of an image associated with a category.
        /// </summary>
        [JsonProperty("image", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Image Image { get; set; }

        /// <summary>
        /// Additional copy to be presented with the category.
        /// </summary>
        [JsonProperty("pageDescription", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string PageDescription { get; set; }

        /// <summary>
        /// A title to be displayed in a browser tab for a category.
        /// </summary>
        [JsonProperty("pageTitle", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string PageTitle { get; set; }

        /// <summary>
        /// An identifier representing a category's ancestor.
        /// </summary>
        [JsonProperty("parentId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string ParentId { get; set; }

        /// <summary>
        /// The title of a category.
        /// </summary>
        [JsonProperty("title", Required = Required.Always)]
        public string Title { get; set; }
    }

    /// <summary>
    /// Information about the location and dimensions of a remote image.
    ///
    /// A location of an image associated with a category.
    /// </summary>
    public partial class Image
    {
        /// <summary>
        /// Text to provide additional context about an image or to be displayed if the image
        /// cannot be loaded.
        /// </summary>
        [JsonProperty("alt", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Alt { get; set; }

        /// <summary>
        /// `body` is the HTTP body to send with the request. This must be a valid
        /// UTF-8 string, and will be sent exactly as specified, with no
        /// additional encoding (e.g. URL-escaping or base64) applied.
        /// </summary>
        [JsonProperty("body", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Body { get; set; }

        /// <summary>
        /// `bundle` is the iOS asset bundle which the image is included in. This
        /// will default to [NSBundle mainBundle] if not set.
        /// </summary>
        [JsonProperty("bundle", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Bundle { get; set; }

        /// <summary>
        /// `cache` determines how the requests handles potentially cached
        /// responses.
        ///
        /// - `default`: Use the native platforms default strategy. `useProtocolCachePolicy` on iOS.
        ///
        /// - `reload`: The data for the URL will be loaded from the originating source.
        /// No existing cache data should be used to satisfy a URL load request.
        ///
        /// - `force-cache`: The existing cached data will be used to satisfy the request,
        /// regardless of its age or expiration date. If there is no existing data in the cache
        /// corresponding the request, the data is loaded from the originating source.
        ///
        /// - `only-if-cached`: The existing cache data will be used to satisfy a request, regardless
        /// of
        /// its age or expiration date. If there is no existing data in the cache corresponding
        /// to a URL load request, no attempt is made to load the data from the originating source,
        /// and the load is considered to have failed.
        /// </summary>
        [JsonProperty("cache", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Cache? Cache { get; set; }

        /// <summary>
        /// `headers` is an object representing the HTTP headers to send along with the
        /// request for a remote image.
        /// </summary>
        [JsonProperty("headers", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, string> Headers { get; set; }

        [JsonProperty("height", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? Height { get; set; }

        /// <summary>
        /// `method` is the HTTP Method to use. Defaults to GET if not specified.
        /// </summary>
        [JsonProperty("method", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Method { get; set; }

        /// <summary>
        /// `scale` is used to indicate the scale factor of the image. Defaults to 1.0 if
        /// unspecified, meaning that one image pixel equates to one display point / DIP.
        /// </summary>
        [JsonProperty("scale", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? Scale { get; set; }

        /// <summary>
        /// `uri` is a string representing the resource identifier for the image, which
        /// could be an http address, a local file path, or the name of a static image
        /// resource (which should be wrapped in the `require('./path/to/image.png')`
        /// function).
        /// </summary>
        [JsonProperty("uri", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// `width` and `height` can be specified if known at build time, in which case
        /// these will be used to set the default `<Image/>` component dimensions.
        /// </summary>
        [JsonProperty("width", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? Width { get; set; }
    }

    /// <summary>
    /// Interface prescribing supported options for fetching category data.
    /// </summary>
    public partial class CategoryQuery
    {
        /// <summary>
        /// An identifier for a category.
        /// </summary>
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The maximum number of categories to return for a query.
        /// </summary>
        [JsonProperty("limit", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? Limit { get; set; }

        /// <summary>
        /// The page number of category results to return when querying paginated data.
        /// </summary>
        [JsonProperty("page", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? Page { get; set; }
    }

    /// <summary>
    /// Information about a payment method saved in a user's account and/or used to pay
    /// for an order.
    /// </summary>
    public partial class BasePaymentMethod
    {
        /// <summary>
        /// The routing number of the bank when a bank account is specified.
        /// </summary>
        [JsonProperty("bankRoutingNumber", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string BankRoutingNumber { get; set; }

        /// <summary>
        /// The code of a saved gift certificate.
        /// </summary>
        [JsonProperty("giftCertificateCode", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string GiftCertificateCode { get; set; }

        /// <summary>
        /// A unique identifier for the saved payment method.
        /// </summary>
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The masked code of a saved gift certificate.
        /// </summary>
        [JsonProperty("maskedGiftCertificateCode", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string MaskedGiftCertificateCode { get; set; }

        /// <summary>
        /// Information about a bank account if used as the saved payment method.
        /// </summary>
        [JsonProperty("paymentBankAccount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PaymentBankAccount PaymentBankAccount { get; set; }

        /// <summary>
        /// Information about a credit, debit, or loyalty card if used as the saved payment method.
        /// </summary>
        [JsonProperty("paymentCard", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PaymentCard PaymentCard { get; set; }

        /// <summary>
        /// Identifier for the type saved payment.
        /// </summary>
        [JsonProperty("paymentMethodId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string PaymentMethodId { get; set; }
    }

    /// <summary>
    /// Information about a bank account used to make a payment for an order.
    ///
    /// Information about a bank account if used as the saved payment method.
    /// </summary>
    public partial class PaymentBankAccount
    {
        /// <summary>
        /// The driver's license number of the customer making the payment.
        /// </summary>
        [JsonProperty("driversLicense", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string DriversLicense { get; set; }

        /// <summary>
        /// The last four digits of the customer's drivers license number
        /// </summary>
        [JsonProperty("driversLicenseLastDigits", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string DriversLicenseLastDigits { get; set; }

        /// <summary>
        /// The two-digit state code of the customer's drivers license.
        /// </summary>
        [JsonProperty("driversLicenseStateCode", Required = Required.Always)]
        public string DriversLicenseStateCode { get; set; }

        /// <summary>
        /// The name of the holder of the bank account used to make payment.
        /// </summary>
        [JsonProperty("holder", Required = Required.Always)]
        public string Holder { get; set; }

        /// <summary>
        /// The masked value of the customer's drivers license.
        /// </summary>
        [JsonProperty("maskedDriverLicense", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string MaskedDriverLicense { get; set; }

        /// <summary>
        /// The masked number of the bank account used to make payment.
        /// </summary>
        [JsonProperty("maskedNumber", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string MaskedNumber { get; set; }

        /// <summary>
        /// The number of the bank account used to make payment.
        /// </summary>
        [JsonProperty("number", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Number { get; set; }

        /// <summary>
        /// The last four digits of the bank account number used to make payment.
        /// </summary>
        [JsonProperty("numberLastDigits", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string NumberLastDigits { get; set; }
    }

    /// <summary>
    /// Information about a credit, debit, or loyalty card used to make payment against an
    /// order.
    ///
    /// Information about a credit, debit, or loyalty card if used as the saved payment method.
    /// </summary>
    public partial class PaymentCard
    {
        /// <summary>
        /// Identifier for the type of card used to make payment.
        /// </summary>
        [JsonProperty("cardType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string CardType { get; set; }

        /// <summary>
        /// Whether the card is expired.
        /// </summary>
        [JsonProperty("creditCardExpired", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool? CreditCardExpired { get; set; }

        /// <summary>
        /// A tokenized representation of a card allowing for secure storage of card information
        /// during
        /// a transaction.
        /// </summary>
        [JsonProperty("creditCardToken", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string CreditCardToken { get; set; }

        /// <summary>
        /// The one- or two-digit month of year in which the card expires.
        /// </summary>
        [JsonProperty("expirationMonth", Required = Required.Always)]
        public decimal ExpirationMonth { get; set; }

        /// <summary>
        /// The four-digit year in which the card expires.
        /// </summary>
        [JsonProperty("expirationYear", Required = Required.Always)]
        public decimal ExpirationYear { get; set; }

        /// <summary>
        /// The name of the person who wholds the account for the card.
        /// </summary>
        [JsonProperty("holder", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Holder { get; set; }

        /// <summary>
        /// A value indicating the number of times that a card has been re-issued. This
        /// is most typically found on cards issued within the United Kingdom.
        /// </summary>
        [JsonProperty("issueNumber", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string IssueNumber { get; set; }

        /// <summary>
        /// The masked account number of the card.
        /// </summary>
        [JsonProperty("maskedNumber", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string MaskedNumber { get; set; }

        /// <summary>
        /// The account number of the card.
        /// </summary>
        [JsonProperty("number", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Number { get; set; }

        /// <summary>
        /// The last four digits of the account number of the card.
        /// </summary>
        [JsonProperty("numberLastDigits", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string NumberLastDigits { get; set; }

        /// <summary>
        /// The security code of the card.
        /// </summary>
        [JsonProperty("securityCode", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string SecurityCode { get; set; }

        /// <summary>
        /// The one- or two-digit month of year in which the card was issued.
        /// </summary>
        [JsonProperty("validFromMonth", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? ValidFromMonth { get; set; }

        /// <summary>
        /// The four-digit year in which the card was issued.
        /// </summary>
        [JsonProperty("validFromYear", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? ValidFromYear { get; set; }
    }

    /// <summary>
    /// Type that associates a user's email with a cart.
    /// </summary>
    public partial class CustomerInfoOptions
    {
        /// <summary>
        /// A unique identifier for a cart.
        /// </summary>
        [JsonProperty("cartId", Required = Required.Always)]
        public string CartId { get; set; }

        /// <summary>
        /// The user's email address.
        /// </summary>
        [JsonProperty("email", Required = Required.Always)]
        public string Email { get; set; }
    }

    /// <summary>
    /// Encapsulation of common fields that indicate the gift status of products.
    /// </summary>
    public partial class BaseGiftOptions
    {
        /// <summary>
        /// Whether the specified shipment is a gift.
        /// </summary>
        [JsonProperty("gift", Required = Required.Always)]
        public bool Gift { get; set; }

        /// <summary>
        /// A gift message to be provided alongside the shipment in question.
        /// </summary>
        [JsonProperty("giftMessage", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string GiftMessage { get; set; }
    }

    /// <summary>
    /// Interface that indicates that a specific shipment from a cart is a gift.
    /// </summary>
    public partial class GiftOptions
    {
        /// <summary>
        /// A unique identifier for a cart which contains the shipment to be marked as a gift.
        /// </summary>
        [JsonProperty("cartId", Required = Required.Always)]
        public string CartId { get; set; }

        /// <summary>
        /// Whether the specified shipment is a gift.
        /// </summary>
        [JsonProperty("gift", Required = Required.Always)]
        public bool Gift { get; set; }

        /// <summary>
        /// A gift message to be provided alongside the shipment in question.
        /// </summary>
        [JsonProperty("giftMessage", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string GiftMessage { get; set; }

        /// <summary>
        /// A unique identifier for the shipment that is to be treated as a gift. Shipments are
        /// typically the individual packages that comprise a customer's order.
        /// </summary>
        [JsonProperty("shipmentId", Required = Required.Always)]
        public string ShipmentId { get; set; }
    }

    /// <summary>
    /// Interface specifying the options that are available when performing a login operation
    /// through a specified data source.
    /// </summary>
    public partial class LoginOptions
    {
        /// <summary>
        /// Whether the user's current cart should be merged with the cart from their previous
        /// authenticated session.
        /// </summary>
        [JsonProperty("shouldMergeCart", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShouldMergeCart { get; set; }
    }

    /// <summary>
    /// Information about a transaction that has been successfully completed.
    /// </summary>
    public partial class Order
    {
        /// <summary>
        /// The billing address for the order as specified by the customer.
        /// </summary>
        [JsonProperty("billingAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Address BillingAddress { get; set; }

        /// <summary>
        /// Label indicating the e-commerce channel on which the user completed the order.
        /// </summary>
        [JsonProperty("channelType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string ChannelType { get; set; }

        /// <summary>
        /// String or identifier indicating the status of the order. For Demandware this will be set
        /// to '0' (not confirmed) or '2' (confirmed).
        /// </summary>
        [JsonProperty("confirmationStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string ConfirmationStatus { get; set; }

        /// <summary>
        /// Enables basic storage and retrieval of dates and times.
        /// </summary>
        [JsonProperty("creationDate", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreationDate { get; set; }

        /// <summary>
        /// The ISO 4217 code indicating the currency of the transaction.
        /// </summary>
        [JsonProperty("currency", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>
        /// Information about the customer who created the order.
        /// </summary>
        [JsonProperty("customerInfo", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CustomerAccount CustomerInfo { get; set; }

        /// <summary>
        /// The name of the customer who created the order.
        /// </summary>
        [JsonProperty("customerName", Required = Required.Always)]
        public string CustomerName { get; set; }

        /// <summary>
        /// A unique identifier for the order.
        /// </summary>
        [JsonProperty("orderId", Required = Required.Always)]
        public string OrderId { get; set; }

        /// <summary>
        /// The value of the tax that was applied to the order.
        /// </summary>
        [JsonProperty("orderTax", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue OrderTax { get; set; }

        /// <summary>
        /// A URL-safe token that can be used to reference the order.
        /// </summary>
        [JsonProperty("orderToken", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string OrderToken { get; set; }

        /// <summary>
        /// The total cost of the order including taxes and fees.
        /// </summary>
        [JsonProperty("orderTotal", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue OrderTotal { get; set; }

        /// <summary>
        /// String or identifier indicating the payment status of the order. For Demandware the
        /// possible
        /// values are 0 (not paid), 1 (partial payment), or 2 (paid)
        /// </summary>
        [JsonProperty("paymentStatus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string PaymentStatus { get; set; }

        /// <summary>
        /// Information about the payments (e.g., credit card transactions) that were made
        /// for the order.
        /// </summary>
        [JsonProperty("payments", Required = Required.Always)]
        public List<Payment> Payments { get; set; }

        /// <summary>
        /// An array of products which comprise the order.
        /// </summary>
        [JsonProperty("productItems", Required = Required.Always)]
        public List<ProductItem> ProductItems { get; set; }

        /// <summary>
        /// An array of shipments that comprise the order. Shipments typically represent each of the
        /// boxes that will be shipped as part of the order. Each shipment can have different
        /// tracking
        /// information.
        /// </summary>
        [JsonProperty("shipments", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Shipment> Shipments { get; set; }

        /// <summary>
        /// Identifier indicating the website or property in which an order was made.
        /// </summary>
        [JsonProperty("siteId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string SiteId { get; set; }

        /// <summary>
        /// String or identifier indicating the status of the order. For Demandware the possible
        /// values
        /// are:
        ///
        /// 0 - Created
        /// 1 - Exported
        /// 2 - Ready
        /// 3 - Export Failed
        /// 4 - Open
        /// 5 - Completed
        /// 6 - Cancelled
        /// 7 - Replaced
        /// 8 - Failed
        /// </summary>
        [JsonProperty("status", Required = Required.Always)]
        public string Status { get; set; }
    }

    /// <summary>
    /// Information about a user's saved account.
    ///
    /// Information about the customer who created the order.
    ///
    /// Information about a customer making an order.
    /// </summary>
    public partial class CustomerAccount
    {
        /// <summary>
        /// An array of address objects that a customer has saved to their account.
        /// </summary>
        [JsonProperty("addresses", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<CustomerAddress> Addresses { get; set; }

        /// <summary>
        /// Whether the user authenticated as a guest or has previously registered.
        /// </summary>
        [JsonProperty("authType", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? AuthType { get; set; }

        /// <summary>
        /// Enables basic storage and retrieval of dates and times.
        /// </summary>
        [JsonProperty("birthday", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Birthday { get; set; }

        /// <summary>
        /// The company that the customer is representing.
        /// </summary>
        [JsonProperty("companyName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Enables basic storage and retrieval of dates and times.
        /// </summary>
        [JsonProperty("creationDate", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreationDate { get; set; }

        /// <summary>
        /// A unique identifier for the customer. For Demandware requests this value is a hash.
        /// </summary>
        [JsonProperty("customerId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        /// <summary>
        /// A secondary identifier for the customer.
        /// </summary>
        [JsonProperty("customerNumber", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// A customer's e-mail address.
        /// </summary>
        [JsonProperty("email", Required = Required.Always)]
        public string Email { get; set; }

        /// <summary>
        /// Whether the customer's account is able to be accessed.
        /// </summary>
        [JsonProperty("enabled", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// The fax number associated with the customer's account. This number shouldn't
        /// contain dashes or other formatting characters.
        /// </summary>
        [JsonProperty("fax", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Fax { get; set; }

        /// <summary>
        /// A person's given name.
        /// </summary>
        [JsonProperty("firstName", Required = Required.Always)]
        public string FirstName { get; set; }

        /// <summary>
        /// The customer's gender.
        /// </summary>
        [JsonProperty("gender", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Gender? Gender { get; set; }

        /// <summary>
        /// The customer's job title.
        /// </summary>
        [JsonProperty("jobTitle", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string JobTitle { get; set; }

        /// <summary>
        /// Enables basic storage and retrieval of dates and times.
        /// </summary>
        [JsonProperty("lastLoginTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastLoginTime { get; set; }

        /// <summary>
        /// Enables basic storage and retrieval of dates and times.
        /// </summary>
        [JsonProperty("lastModified", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastModified { get; set; }

        /// <summary>
        /// A person's surname.
        /// </summary>
        [JsonProperty("lastName", Required = Required.Always)]
        public string LastName { get; set; }

        /// <summary>
        /// Enables basic storage and retrieval of dates and times.
        /// </summary>
        [JsonProperty("lastVisitTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastVisitTime { get; set; }

        /// <summary>
        /// A customer's username for authentication.
        /// </summary>
        [JsonProperty("login", Required = Required.Always)]
        public string Login { get; set; }

        /// <summary>
        /// A note associated with a customer's account.
        /// </summary>
        [JsonProperty("note", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Note { get; set; }

        /// <summary>
        /// An array of PaymentMethod objects. These represent saved credit cards or other
        /// methods that a user added to their account.
        /// </summary>
        [JsonProperty("paymentInstruments", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<PaymentMethod> PaymentInstruments { get; set; }

        /// <summary>
        /// The customer's business phone number. This number shouldn't contain dashes or other
        /// formatting characters.
        /// </summary>
        [JsonProperty("phoneBusiness", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string PhoneBusiness { get; set; }

        /// <summary>
        /// The customer's home phone number. This number shouldn't contain dashes or other
        /// formatting characters.
        /// </summary>
        [JsonProperty("phoneHome", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string PhoneHome { get; set; }

        /// <summary>
        /// The customer's mobile phone number. This number shouldn't contain dashes or other
        /// formatting characters.
        /// </summary>
        [JsonProperty("phoneMobile", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string PhoneMobile { get; set; }

        /// <summary>
        /// The customer's preferred locale.
        /// </summary>
        [JsonProperty("preferredLocale", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string PreferredLocale { get; set; }

        /// <summary>
        /// Enables basic storage and retrieval of dates and times.
        /// </summary>
        [JsonProperty("previousLoginTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PreviousLoginTime { get; set; }

        /// <summary>
        /// Enables basic storage and retrieval of dates and times.
        /// </summary>
        [JsonProperty("previousVisitTime", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PreviousVisitTime { get; set; }

        /// <summary>
        /// A term used to address a person.
        /// </summary>
        [JsonProperty("salutation", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Salutation { get; set; }

        /// <summary>
        /// A person's middle name or initial.
        /// </summary>
        [JsonProperty("secondName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string SecondName { get; set; }

        /// <summary>
        /// The suffix of a person's name.
        /// </summary>
        [JsonProperty("suffix", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Suffix { get; set; }

        /// <summary>
        /// The customer's title.
        /// </summary>
        [JsonProperty("title", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }
    }

    /// <summary>
    /// Information about an address that is associated with a customer.
    /// </summary>
    public partial class CustomerAddress
    {
        /// <summary>
        /// The first line of an address, typically comprised of street number and name.
        /// </summary>
        [JsonProperty("address1", Required = Required.Always)]
        public string Address1 { get; set; }

        /// <summary>
        /// The second line of an address. This is typically P.O. box, apartment number, or similar.
        /// </summary>
        [JsonProperty("address2", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Address2 { get; set; }

        /// <summary>
        /// The city of an address.
        /// </summary>
        [JsonProperty("city", Required = Required.Always)]
        public string City { get; set; }

        /// <summary>
        /// The company name of an address.
        /// </summary>
        [JsonProperty("companyName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string CompanyName { get; set; }

        /// <summary>
        /// The address' two-character ISO 3166 country code.
        /// </summary>
        [JsonProperty("countryCode", Required = Required.Always)]
        public string CountryCode { get; set; }

        /// <summary>
        /// A person's given name.
        /// </summary>
        [JsonProperty("firstName", Required = Required.Always)]
        public string FirstName { get; set; }

        /// <summary>
        /// The full name of a person associated with an address.
        /// </summary>
        [JsonProperty("fullName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string FullName { get; set; }

        /// <summary>
        /// An identifier for an address.
        /// </summary>
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The job title of a person associated with an address.
        /// </summary>
        [JsonProperty("jobTitle", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string JobTitle { get; set; }

        /// <summary>
        /// A person's surname.
        /// </summary>
        [JsonProperty("lastName", Required = Required.Always)]
        public string LastName { get; set; }

        /// <summary>
        /// The phone number of a person associated with an address. This number should not contain
        /// dashes or other formatting characters.
        /// </summary>
        [JsonProperty("phone", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Phone { get; set; }

        /// <summary>
        /// A P.O. box number for an address.
        /// </summary>
        [JsonProperty("postBox", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string PostBox { get; set; }

        /// <summary>
        /// The postal code of an address.
        /// </summary>
        [JsonProperty("postalCode", Required = Required.Always)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Whether the address has been marked as a customer's preferred/primary address.
        /// </summary>
        [JsonProperty("preferred", Required = Required.Always)]
        public bool Preferred { get; set; }

        /// <summary>
        /// A term used to address a person.
        /// </summary>
        [JsonProperty("salutation", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Salutation { get; set; }

        /// <summary>
        /// A person's middle name or initial.
        /// </summary>
        [JsonProperty("secondName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string SecondName { get; set; }

        /// <summary>
        /// Two-digit state code for an address.
        /// </summary>
        [JsonProperty("stateCode", Required = Required.Always)]
        public string StateCode { get; set; }

        /// <summary>
        /// The suffix of a person's name.
        /// </summary>
        [JsonProperty("suffix", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Suffix { get; set; }

        /// <summary>
        /// The suite associated with an address.
        /// </summary>
        [JsonProperty("suite", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Suite { get; set; }

        /// <summary>
        /// A title given to the address, typically used when saving addresses to an account.
        /// </summary>
        [JsonProperty("title", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }
    }

    /// <summary>
    /// Information about a payment method such as credit card or bank account. This is typically
    /// used to represent methods that a user has saved to their account.
    /// </summary>
    public partial class PaymentMethod
    {
        /// <summary>
        /// The routing number of the bank when a bank account is specified.
        /// </summary>
        [JsonProperty("bankRoutingNumber", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string BankRoutingNumber { get; set; }

        /// <summary>
        /// Enables basic storage and retrieval of dates and times.
        /// </summary>
        [JsonProperty("creationDate", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreationDate { get; set; }

        /// <summary>
        /// The code of a saved gift certificate.
        /// </summary>
        [JsonProperty("giftCertificateCode", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string GiftCertificateCode { get; set; }

        /// <summary>
        /// A unique identifier for the saved payment method.
        /// </summary>
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The masked code of a saved gift certificate.
        /// </summary>
        [JsonProperty("maskedGiftCertificateCode", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string MaskedGiftCertificateCode { get; set; }

        /// <summary>
        /// Enables basic storage and retrieval of dates and times.
        /// </summary>
        [JsonProperty("modifiedDate", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ModifiedDate { get; set; }

        /// <summary>
        /// Information about a bank account if used as the saved payment method.
        /// </summary>
        [JsonProperty("paymentBankAccount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PaymentBankAccount PaymentBankAccount { get; set; }

        /// <summary>
        /// Information about a credit, debit, or loyalty card if used as the saved payment method.
        /// </summary>
        [JsonProperty("paymentCard", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PaymentCard PaymentCard { get; set; }

        /// <summary>
        /// Identifier for the type saved payment.
        /// </summary>
        [JsonProperty("paymentMethodId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string PaymentMethodId { get; set; }
    }

    /// <summary>
    /// The monetary amount of the payment.
    ///
    /// The original price of the product.
    ///
    /// The current offer price of the product.
    ///
    /// The total price of a line item in the cart. This is the cost of the product
    /// multiplied by its quantity.
    ///
    /// The original price of the variant. Typically displayed as crossed-out when a variant
    /// is on sale.
    ///
    /// The current offer price for the variant.
    ///
    /// The cost of the shipping method.
    ///
    /// The value of the tax that was applied to the order.
    ///
    /// The total cost of the order including taxes and fees.
    ///
    /// The value of the promotion. This is typically the savings on the order due to the
    /// promotion.
    ///
    /// The cost for shipping an order.
    ///
    /// The total cost of the products in the cart before shipping feeds and taxes have
    /// been added.
    ///
    /// The total amount of taxes for an order.
    ///
    /// The total cost of an order including taxes and fees.
    /// </summary>
    public partial class CurrencyValue
    {
        [JsonProperty("currencyCode", Required = Required.Always)]
        public string CurrencyCode { get; set; }

        [JsonProperty("value", Required = Required.Always)]
        public string Value { get; set; }

        public CurrencyValue()
        {
        }

        public CurrencyValue(Mediachase.Commerce.Money price)
        {
            if (price != null)
            {
                CurrencyCode = price.Currency;
                Value = price.Amount.ToString();
            }
        }
    }

    /// <summary>
    /// Information about a single payment made against an order.
    /// </summary>
    public partial class Payment
    {
        /// <summary>
        /// The monetary amount of the payment.
        /// </summary>
        [JsonProperty("amount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue Amount { get; set; }

        /// <summary>
        /// The routing number of the bank when a bank account is specified.
        /// </summary>
        [JsonProperty("bankRoutingNumber", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string BankRoutingNumber { get; set; }

        /// <summary>
        /// Identifier indicating a customer's saved payment when applicable.
        /// </summary>
        [JsonProperty("customerPaymentId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string CustomerPaymentId { get; set; }

        /// <summary>
        /// The code of a saved gift certificate.
        /// </summary>
        [JsonProperty("giftCertificateCode", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string GiftCertificateCode { get; set; }

        /// <summary>
        /// A unique identifier for the saved payment method.
        /// </summary>
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The masked code of a saved gift certificate.
        /// </summary>
        [JsonProperty("maskedGiftCertificateCode", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string MaskedGiftCertificateCode { get; set; }

        /// <summary>
        /// Information about a bank account if used as the saved payment method.
        /// </summary>
        [JsonProperty("paymentBankAccount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PaymentBankAccount PaymentBankAccount { get; set; }

        /// <summary>
        /// Information about a credit, debit, or loyalty card if used as the saved payment method.
        /// </summary>
        [JsonProperty("paymentCard", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public PaymentCard PaymentCard { get; set; }

        /// <summary>
        /// Identifier for the type saved payment.
        /// </summary>
        [JsonProperty("paymentMethodId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string PaymentMethodId { get; set; }
    }

    /// <summary>
    /// Information about products that belong to an order.
    /// </summary>
    public partial class ProductItem
    {
        /// <summary>
        /// Whether or not the product is available. If undefined the product is assumed to
        /// be available.
        /// </summary>
        [JsonProperty("available", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Available { get; set; }

        /// <summary>
        /// The brand or manufacturer of a product.
        /// </summary>
        [JsonProperty("brand", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Brand { get; set; }

        /// <summary>
        /// A description of the product.
        /// </summary>
        [JsonProperty("description", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Whether the specified shipment is a gift.
        /// </summary>
        [JsonProperty("gift", Required = Required.Always)]
        public bool Gift { get; set; }

        /// <summary>
        /// A gift message to be provided alongside the shipment in question.
        /// </summary>
        [JsonProperty("giftMessage", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string GiftMessage { get; set; }

        /// <summary>
        /// A SEO slug for the product. Used as a human-readable portion of the URL
        /// to access the product.
        /// </summary>
        [JsonProperty("handle", Required = Required.Always)]
        public string Handle { get; set; }

        /// <summary>
        /// An array of images of the product.
        /// </summary>
        [JsonProperty("images", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Image> Images { get; set; }

        /// <summary>
        /// The current inventory for the product.
        /// </summary>
        [JsonProperty("inventory", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Inventory Inventory { get; set; }

        /// <summary>
        /// A unique identifier for a cart item. This is typically separate from the product
        /// ID because a cart item describes a product as well as its quantity within a cart.
        /// </summary>
        [JsonProperty("itemId", Required = Required.Always)]
        public string ItemId { get; set; }

        /// <summary>
        /// Additional information about a cart item such as a description or disclaimer.
        /// </summary>
        [JsonProperty("itemText", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string ItemText { get; set; }

        /// <summary>
        /// An array of options for the product. For example a 1 Year Warranty.
        /// </summary>
        [JsonProperty("options", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Option> Options { get; set; }

        /// <summary>
        /// The original price of the product.
        /// </summary>
        [JsonProperty("originalPrice", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue OriginalPrice { get; set; }

        /// <summary>
        /// The current offer price of the product.
        /// </summary>
        [JsonProperty("price", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue Price { get; set; }

        /// <summary>
        /// The identifier of the product which is represented by the cart item.
        /// </summary>
        [JsonProperty("productId", Required = Required.Always)]
        public string ProductId { get; set; }

        /// <summary>
        /// An array of promotions which apply to the cart item.
        /// </summary>
        [JsonProperty("promotions", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<CartPromo> Promotions { get; set; }

        /// <summary>
        /// The quantity of the specified product within the cart.
        /// </summary>
        [JsonProperty("quantity", Required = Required.Always)]
        public decimal Quantity { get; set; }

        /// <summary>
        /// The reviews for this product.
        /// </summary>
        [JsonProperty("review", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ReviewDetails Review { get; set; }

        /// <summary>
        /// An identifier for the shipment in which the product is included.
        /// </summary>
        [JsonProperty("shipmentId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// An identifier for the ShippingItem entry corresponding to this product. ShippingItem
        /// provides information about a product to be shipped and its tax status.
        /// </summary>
        [JsonProperty("shippingItemId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string ShippingItemId { get; set; }

        /// <summary>
        /// The name of the product.
        /// </summary>
        [JsonProperty("title", Required = Required.Always)]
        public string Title { get; set; }

        /// <summary>
        /// The total price of a line item in the cart. This is the cost of the product
        /// multiplied by its quantity.
        /// </summary>
        [JsonProperty("totalPrice", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue TotalPrice { get; set; }

        /// <summary>
        /// An array of variants for the product. For example alternative sizes or colors.
        /// </summary>
        [JsonProperty("variants", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Variant> Variants { get; set; }
    }

    /// <summary>
    /// The current inventory for the product.
    ///
    /// Information describing the state of a product and what actions a user is able to perform
    /// with the product.
    /// </summary>
    public partial class Inventory
    {
        /// <summary>
        /// Whether a product can be ordered when it's out of stock.
        /// </summary>
        [JsonProperty("backorderable", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Backorderable { get; set; }

        /// <summary>
        /// Whether a product is in stock and able to be ordered.
        /// </summary>
        [JsonProperty("orderable", Required = Required.Always)]
        public bool Orderable { get; set; }

        /// <summary>
        /// Whether a product can be ordered before it becomes available.
        /// </summary>
        [JsonProperty("preorderable", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Preorderable { get; set; }

        /// <summary>
        /// The quantity of a product available for ordering.
        /// </summary>
        [JsonProperty("stock", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? Stock { get; set; }
    }

    /// <summary>
    /// Interface describing key-value data types in which a single key can have multiple values.
    /// </summary>
    public partial class Option
    {
        /// <summary>
        /// A unique identifier for the option.
        /// </summary>
        [JsonProperty("id", Required = Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// A name for the option which is typically presented to the user.
        /// </summary>
        [JsonProperty("name", Required = Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// Array of values for the option.
        /// </summary>
        [JsonProperty("values", Required = Required.Always)]
        public List<OptionValue> Values { get; set; }
    }

    /// <summary>
    /// Interface describing a single value of a key-value pair.
    /// </summary>
    public partial class OptionValue
    {
        /// <summary>
        /// Whether the value is available. This is typically utilized for products in which an
        /// OptionValue is used to represent product variant and thus indicates whether the variant
        /// can be purchased.
        /// </summary>
        [JsonProperty("available", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Available { get; set; }

        /// <summary>
        /// The name of the value.
        /// </summary>
        [JsonProperty("name", Required = Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// Identifier for the value. This may be a database key or other non-human-readable
        /// string.
        /// </summary>
        [JsonProperty("value", Required = Required.Always)]
        public string Value { get; set; }
    }

    public partial class CartPromo
    {
        [JsonProperty("id", Required = Required.Always)]
        public string Id { get; set; }

        [JsonProperty("price", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue Price { get; set; }

        [JsonProperty("text", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Text { get; set; }
    }

    /// <summary>
    /// The reviews for this product.
    ///
    /// Details for a group of reviews
    /// </summary>
    public partial class ReviewDetails
    {
        /// <summary>
        /// Identifier for the group of reviews
        /// </summary>
        [JsonProperty("id", Required = Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// Maximum number of reviews in a single details
        /// </summary>
        [JsonProperty("limit", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? Limit { get; set; }

        /// <summary>
        /// Name of product being reviewed
        /// </summary>
        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Page of reviews
        /// </summary>
        [JsonProperty("page", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? Page { get; set; }

        /// <summary>
        /// Reviews
        /// </summary>
        [JsonProperty("reviews", Required = Required.Always)]
        public List<Review> Reviews { get; set; }

        /// <summary>
        /// Statistics for the group of reviews
        /// </summary>
        [JsonProperty("statistics", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ReviewStatistics Statistics { get; set; }

        /// <summary>
        /// Summary of the group of reviews
        /// </summary>
        [JsonProperty("summary", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ReviewSummary Summary { get; set; }

        /// <summary>
        /// Total number of reviews for this identifier
        /// </summary>
        [JsonProperty("total", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? Total { get; set; }
    }

    /// <summary>
    /// A single review
    /// </summary>
    public partial class Review
    {
        /// <summary>
        /// Badges for the review
        /// </summary>
        [JsonProperty("badges", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<ReviewBadge> Badges { get; set; }

        /// <summary>
        /// Bottom line (summary) of the review
        /// </summary>
        [JsonProperty("bottomLine", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string BottomLine { get; set; }

        /// <summary>
        /// Contexts for the review
        /// </summary>
        [JsonProperty("context", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<ReviewContext> Context { get; set; }

        /// <summary>
        /// Creation date and time of the review
        /// </summary>
        [JsonProperty("created", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Created { get; set; }

        /// <summary>
        /// Dimensions for the review
        /// </summary>
        [JsonProperty("dimensions", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<ReviewDimension> Dimensions { get; set; }

        /// <summary>
        /// Feedback for the review
        /// </summary>
        [JsonProperty("feedback", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ReviewFeedback Feedback { get; set; }

        /// <summary>
        /// Identifier for the review
        /// </summary>
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Does the user recommend the product being reviewd
        /// </summary>
        [JsonProperty("isRecommended", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsRecommended { get; set; }

        /// <summary>
        /// Photos for the review
        /// </summary>
        [JsonProperty("photos", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Image> Photos { get; set; }

        /// <summary>
        /// Review rating
        /// </summary>
        [JsonProperty("rating", Required = Required.Always)]
        public decimal Rating { get; set; }

        /// <summary>
        /// Logo for the review origin
        /// </summary>
        [JsonProperty("reviewedAtLogo", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string ReviewedAtLogo { get; set; }

        /// <summary>
        /// Text of the review
        /// </summary>
        [JsonProperty("text", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Text { get; set; }

        /// <summary>
        /// Review title
        /// </summary>
        [JsonProperty("title", Required = Required.Always)]
        public string Title { get; set; }

        /// <summary>
        /// User who created the review
        /// </summary>
        [JsonProperty("user", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ReviewUser User { get; set; }
    }

    /// <summary>
    /// Badge for a review
    /// </summary>
    public partial class ReviewBadge
    {
        /// <summary>
        /// Type of badge
        /// </summary>
        [JsonProperty("badgeType", Required = Required.Always)]
        public string BadgeType { get; set; }

        /// <summary>
        /// Content type of the badge
        /// </summary>
        [JsonProperty("contentType", Required = Required.Always)]
        public string ContentType { get; set; }

        /// <summary>
        /// Identifier for the badge
        /// </summary>
        [JsonProperty("id", Required = Required.Always)]
        public string Id { get; set; }
    }

    /// <summary>
    /// Review context
    /// </summary>
    public partial class ReviewContext
    {
        /// <summary>
        /// Identifier for the context
        /// </summary>
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Label for the context
        /// </summary>
        [JsonProperty("label", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// Value for the context
        /// </summary>
        [JsonProperty("value", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Value? Value { get; set; }

        /// <summary>
        /// Label for the context value
        /// </summary>
        [JsonProperty("valueLabel", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string ValueLabel { get; set; }
    }

    /// <summary>
    /// Review Dimension
    /// </summary>
    public partial class ReviewDimension
    {
        /// <summary>
        /// Identifier for the dimension
        /// </summary>
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Label for the dimension
        /// </summary>
        [JsonProperty("label", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// Maximum label for the dimension
        /// </summary>
        [JsonProperty("maxLabel", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string MaxLabel { get; set; }

        /// <summary>
        /// Minimum label for the dimension
        /// </summary>
        [JsonProperty("minLabel", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string MinLabel { get; set; }

        /// <summary>
        /// Value of the dimension
        /// </summary>
        [JsonProperty("value", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// Label for the dimension value
        /// </summary>
        [JsonProperty("valueLabel", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string ValueLabel { get; set; }
    }

    /// <summary>
    /// Feedback for the review
    ///
    /// Frequency of positive and negative review feedback
    /// </summary>
    public partial class ReviewFeedback
    {
        /// <summary>
        /// Count of negative feedback
        /// </summary>
        [JsonProperty("negative", Required = Required.Always)]
        public decimal Negative { get; set; }

        /// <summary>
        /// Count of positive feedback
        /// </summary>
        [JsonProperty("positive", Required = Required.Always)]
        public decimal Positive { get; set; }

        /// <summary>
        /// Total count of feedback
        /// </summary>
        [JsonProperty("total", Required = Required.Always)]
        public decimal Total { get; set; }
    }

    /// <summary>
    /// User who created the review
    ///
    /// Review user
    /// </summary>
    public partial class ReviewUser
    {
        /// <summary>
        /// Is this user a staff reviewer
        /// </summary>
        [JsonProperty("isStaffReviewer", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsStaffReviewer { get; set; }

        /// <summary>
        /// Is this user a verified buyer
        /// </summary>
        [JsonProperty("isVerifiedBuyer", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsVerifiedBuyer { get; set; }

        /// <summary>
        /// Is this user a verified reviewer
        /// </summary>
        [JsonProperty("isVerifiedReviewer", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsVerifiedReviewer { get; set; }

        /// <summary>
        /// User location
        /// </summary>
        [JsonProperty("location", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Location { get; set; }

        /// <summary>
        /// User name
        /// </summary>
        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }
    }

    /// <summary>
    /// Statistics for the group of reviews
    ///
    /// Statistics for a group of reviews
    /// </summary>
    public partial class ReviewStatistics
    {
        /// <summary>
        /// Average rating for the group of reviews
        /// </summary>
        [JsonProperty("averageRating", Required = Required.Always)]
        public decimal AverageRating { get; set; }

        /// <summary>
        /// Distribution of review contexts
        /// </summary>
        [JsonProperty("contextDistributions", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<ReviewContextDistribution> ContextDistributions { get; set; }

        /// <summary>
        /// Averages of review dimensions
        /// </summary>
        [JsonProperty("dimensionAverages", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<ReviewDimensionAverage> DimensionAverages { get; set; }

        /// <summary>
        /// Identifier for the group of reviews
        /// </summary>
        [JsonProperty("id", Required = Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// Distribution of review ratings
        /// </summary>
        [JsonProperty("ratingDistribution", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<ReviewDistribution> RatingDistribution { get; set; }

        /// <summary>
        /// Ratio of users who recommend this product
        /// </summary>
        [JsonProperty("recommendedRatio", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? RecommendedRatio { get; set; }

        /// <summary>
        /// Count of reviews
        /// </summary>
        [JsonProperty("reviewCount", Required = Required.Always)]
        public decimal ReviewCount { get; set; }
    }

    /// <summary>
    /// Distribution of a review context
    /// </summary>
    public partial class ReviewContextDistribution
    {
        /// <summary>
        /// Identifier for the context
        /// </summary>
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Label for the context
        /// </summary>
        [JsonProperty("label", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// Value for the context
        /// </summary>
        [JsonProperty("value", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Value? Value { get; set; }

        /// <summary>
        /// Label for the context value
        /// </summary>
        [JsonProperty("valueLabel", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string ValueLabel { get; set; }

        /// <summary>
        /// Values of the context distribution
        /// </summary>
        [JsonProperty("values", Required = Required.Always)]
        public List<ReviewDistribution> Values { get; set; }
    }

    /// <summary>
    /// Frequency of a value in a distribution
    /// </summary>
    public partial class ReviewDistribution
    {
        /// <summary>
        /// Frequency of review values matching distribution value
        /// </summary>
        [JsonProperty("count", Required = Required.Always)]
        public decimal Count { get; set; }

        /// <summary>
        /// Value in the distribution
        /// </summary>
        [JsonProperty("value", Required = Required.Always)]
        public Gender Value { get; set; }
    }

    /// <summary>
    /// Average of a review dimension
    /// </summary>
    public partial class ReviewDimensionAverage
    {
        /// <summary>
        /// Average value of a review dimension
        /// </summary>
        [JsonProperty("averageRating", Required = Required.Always)]
        public decimal AverageRating { get; set; }

        /// <summary>
        /// Identifier for the dimension
        /// </summary>
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Label for the dimension
        /// </summary>
        [JsonProperty("label", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// Maximum label for the dimension
        /// </summary>
        [JsonProperty("maxLabel", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string MaxLabel { get; set; }

        /// <summary>
        /// Minimum label for the dimension
        /// </summary>
        [JsonProperty("minLabel", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string MinLabel { get; set; }
    }

    /// <summary>
    /// Summary of the group of reviews
    ///
    /// Summary of a group of reviews
    /// </summary>
    public partial class ReviewSummary
    {
        /// <summary>
        /// Average rating for the group of reviews
        /// </summary>
        [JsonProperty("averageRating", Required = Required.Always)]
        public decimal AverageRating { get; set; }

        /// <summary>
        /// Identifier for the group of reviews
        /// </summary>
        [JsonProperty("id", Required = Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// Count of reviews
        /// </summary>
        [JsonProperty("reviewCount", Required = Required.Always)]
        public decimal ReviewCount { get; set; }
    }

    /// <summary>
    /// Information about a product SKU. Products with size and/or color options typically have
    /// each possible combination represented as a variant.
    /// </summary>
    public partial class Variant
    {
        /// <summary>
        /// Whether or not the variant is available. If undefined the variant is assumed to
        /// be available.
        /// </summary>
        [JsonProperty("available", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Available { get; set; }

        /// <summary>
        /// The internal identifier of the variant.
        /// </summary>
        [JsonProperty("id", Required = Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// An array of images of the variant.
        /// </summary>
        [JsonProperty("images", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Image> Images { get; set; }

        /// <summary>
        /// An array of key/value pairs indicating specific attributes about a variant.
        /// </summary>
        [JsonProperty("optionValues", Required = Required.Always)]
        public List<OptionValue> OptionValues { get; set; }

        /// <summary>
        /// The original price of the variant. Typically displayed as crossed-out when a variant
        /// is on sale.
        /// </summary>
        [JsonProperty("originalPrice", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue OriginalPrice { get; set; }

        /// <summary>
        /// The current offer price for the variant.
        /// </summary>
        [JsonProperty("price", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue Price { get; set; }

        /// <summary>
        /// The title of the variant.
        /// </summary>
        [JsonProperty("title", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }
    }

    /// <summary>
    /// Information about a shipment, which represents a single package shipped as part of an
    /// order.
    /// </summary>
    public partial class Shipment
    {
        /// <summary>
        /// The address of the recipient of the shipment.
        /// </summary>
        [JsonProperty("address", Required = Required.Always)]
        public Address Address { get; set; }

        /// <summary>
        /// Whether the specified shipment is a gift.
        /// </summary>
        [JsonProperty("gift", Required = Required.Always)]
        public bool Gift { get; set; }

        /// <summary>
        /// A gift message to be provided alongside the shipment in question.
        /// </summary>
        [JsonProperty("giftMessage", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string GiftMessage { get; set; }

        /// <summary>
        /// A unique identifier for the shipment.
        /// </summary>
        [JsonProperty("id", Required = Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The sequence number of the shipment in relation to the order.
        /// </summary>
        [JsonProperty("shipmentNumber", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string ShipmentNumber { get; set; }

        /// <summary>
        /// Information about the shipping method selected for the shipment.
        /// </summary>
        [JsonProperty("shippingMethod", Required = Required.Always)]
        public ShippingMethod ShippingMethod { get; set; }
    }

    /// <summary>
    /// Information about a shipping method. Examples of shipping methods are one-day, two-day,
    /// standard, and so on.
    ///
    /// Information about the shipping method selected for the shipment.
    /// </summary>
    public partial class ShippingMethod
    {
        /// <summary>
        /// A detailed description of the shipping method.
        /// </summary>
        [JsonProperty("description", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Identifier corresponding to an external shipping processor. These can include shipping
        /// companies (DHL, FedEx, UPS, etc.) and fulfillment services.
        /// </summary>
        [JsonProperty("externalShippingMethod", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string ExternalShippingMethod { get; set; }

        /// <summary>
        /// A unique identifier for the shipping method.
        /// </summary>
        [JsonProperty("id", Required = Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the shipping method.
        /// </summary>
        [JsonProperty("name", Required = Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The cost of the shipping method.
        /// </summary>
        [JsonProperty("price", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue Price { get; set; }

        /// <summary>
        /// Information about promotions to be displayed alongside the shipping method.
        /// </summary>
        [JsonProperty("shippingPromotions", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<ShippingMethodPromo> ShippingPromotions { get; set; }
    }

    /// <summary>
    /// Information about a promotion for a shipping method.
    /// </summary>
    public partial class ShippingMethodPromo
    {
        /// <summary>
        /// A message to be presented to the user regarding the promotion.
        /// </summary>
        [JsonProperty("calloutMessage", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string CalloutMessage { get; set; }

        /// <summary>
        /// A unique identifier for the promotion.
        /// </summary>
        [JsonProperty("id", Required = Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// A URL directing the user to view more information about the promotion.
        /// </summary>
        [JsonProperty("link", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Link { get; set; }

        /// <summary>
        /// The name of the promotion
        /// </summary>
        [JsonProperty("name", Required = Required.Always)]
        public string Name { get; set; }
    }

    public partial class Pageable
    {
        /// <summary>
        /// The maximum number of products to be returned by a single query.
        /// </summary>
        [JsonProperty("limit", Required = Required.Always)]
        public decimal Limit { get; set; }

        /// <summary>
        /// The page number of the products if more products exist for an index than are
        /// returned by a single query.
        /// </summary>
        [JsonProperty("page", Required = Required.Always)]
        public decimal Page { get; set; }
    }

    /// <summary>
    /// Information about a ProductIndex which is a collection of related products that can
    /// typically be sorted and refined by the user.
    /// </summary>
    public partial class ProductIndex
    {
        /// <summary>
        /// A keyword/search term used to generate a product index when applicable.
        /// </summary>
        [JsonProperty("keyword", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Keyword { get; set; }

        /// <summary>
        /// The maximum number of products to be returned by a single query.
        /// </summary>
        [JsonProperty("limit", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? Limit { get; set; }

        /// <summary>
        /// The page number of the products if more products exist for an index than are
        /// returned by a single query.
        /// </summary>
        [JsonProperty("page", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? Page { get; set; }

        /// <summary>
        /// An array of products comprising the index.
        /// </summary>
        [JsonProperty("products", Required = Required.Always)]
        public List<Product> Products { get; set; }

        /// <summary>
        /// An array of available refinements that a user can utilize to filter the list of products.
        /// Common refinements are colors, sizes, and brands.
        /// </summary>
        [JsonProperty("refinements", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Refinement> Refinements { get; set; }

        /// <summary>
        /// An object representing the types of refinements and values for each that have been
        /// selected
        /// to filter the product index.
        /// </summary>
        [JsonProperty("selectedRefinements", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, List<string>> SelectedRefinements { get; set; }

        /// <summary>
        /// The identifier of the currently applied sorting method for the product index.
        /// </summary>
        [JsonProperty("selectedSortingOption", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string SelectedSortingOption { get; set; }

        /// <summary>
        /// An array of available sorting options for the product index.
        /// </summary>
        [JsonProperty("sortingOptions", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<SortingOption> SortingOptions { get; set; }

        /// <summary>
        /// The total number of products that comprise a product index.
        /// </summary>
        [JsonProperty("total", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? Total { get; set; }
    }

    /// <summary>
    /// Information about a product.
    /// </summary>
    public partial class Product
    {
        /// <summary>
        /// Whether or not the product is available. If undefined the product is assumed to
        /// be available.
        /// </summary>
        [JsonProperty("available", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Available { get; set; }

        /// <summary>
        /// The brand or manufacturer of a product.
        /// </summary>
        [JsonProperty("brand", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Brand { get; set; }

        /// <summary>
        /// A description of the product.
        /// </summary>
        [JsonProperty("description", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// A SEO slug for the product. Used as a human-readable portion of the URL
        /// to access the product.
        /// </summary>
        [JsonProperty("handle", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Handle { get; set; }

        /// <summary>
        /// The product's identifier.
        /// </summary>
        [JsonProperty("id", Required = Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// An array of images of the product.
        /// </summary>
        [JsonProperty("images", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Image> Images { get; set; }

        /// <summary>
        /// The current inventory for the product.
        /// </summary>
        [JsonProperty("inventory", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Inventory Inventory { get; set; }

        /// <summary>
        /// An array of options for the product. For example a 1 Year Warranty.
        /// </summary>
        [JsonProperty("options", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Option> Options { get; set; }

        /// <summary>
        /// The original price of the product.
        /// </summary>
        [JsonProperty("originalPrice", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue OriginalPrice { get; set; }

        /// <summary>
        /// The current offer price of the product.
        /// </summary>
        [JsonProperty("price", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue Price { get; set; }

        /// <summary>
        /// An array of promotional text items for the product.
        /// </summary>
        [JsonProperty("promotions", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Promotions { get; set; }

        /// <summary>
        /// The reviews for this product.
        /// </summary>
        [JsonProperty("review", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ReviewDetails Review { get; set; }

        /// <summary>
        /// The name of the product.
        /// </summary>
        [JsonProperty("title", Required = Required.Always)]
        public string Title { get; set; }

        /// <summary>
        /// An array of variants for the product. For example alternative sizes or colors.
        /// </summary>
        [JsonProperty("variants", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Variant> Variants { get; set; }
    }

    /// <summary>
    /// An interface representing a single refinement and its available values.
    /// </summary>
    public partial class Refinement
    {
        /// <summary>
        /// A unique identifier for the refinement.
        /// </summary>
        [JsonProperty("id", Required = Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// A human-readable title for the refinement.
        /// </summary>
        [JsonProperty("title", Required = Required.Always)]
        public string Title { get; set; }

        /// <summary>
        /// An array of values that can be selected for the refinement.
        /// </summary>
        [JsonProperty("values", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<RefinementValue> Values { get; set; }
    }

    /// <summary>
    /// An interface representing a single value for a single refinement.
    /// </summary>
    public partial class RefinementValue
    {
        /// <summary>
        /// The number of products within an index that match the refinement value.
        /// </summary>
        [JsonProperty("count", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? Count { get; set; }

        /// <summary>
        /// A human-readable title for the value.
        /// </summary>
        [JsonProperty("title", Required = Required.Always)]
        public string Title { get; set; }

        /// <summary>
        /// An identifier for the value. This may not be a human-readable title.
        /// </summary>
        [JsonProperty("value", Required = Required.Always)]
        public string Value { get; set; }
    }

    /// <summary>
    /// An interface representing a single type of sort that can be applied to a product index.
    /// Common sorts are price (high-low and low-high), rating, and popularity.
    /// </summary>
    public partial class SortingOption
    {
        /// <summary>
        /// A unique identifier for the sorting option.
        /// </summary>
        [JsonProperty("id", Required = Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// A human-readable title for the sorting option.
        /// </summary>
        [JsonProperty("title", Required = Required.Always)]
        public string Title { get; set; }
    }

    /// <summary>
    /// Interface prescribing options available when fetching products.
    /// </summary>
    public partial class ProductQuery
    {
        /// <summary>
        /// An identifier corresponding to a category for which related products should be returned.
        /// </summary>
        [JsonProperty("categoryId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string CategoryId { get; set; }

        /// <summary>
        /// A product handle for which product data should be returned
        /// </summary>
        [JsonProperty("handle", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Handle { get; set; }

        /// <summary>
        /// A keyword for which matching products should be returned. This is typically used for
        /// product searches.
        /// </summary>
        [JsonProperty("keyword", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Keyword { get; set; }

        /// <summary>
        /// The maximum number of products to be returned by a single query.
        /// </summary>
        [JsonProperty("limit", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? Limit { get; set; }

        /// <summary>
        /// The page number of the products if more products exist for an index than are
        /// returned by a single query.
        /// </summary>
        [JsonProperty("page", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public decimal? Page { get; set; }

        /// <summary>
        /// An array of product identifiers for which product data should be provided.
        /// </summary>
        [JsonProperty("productIds", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ProductIds { get; set; }

        /// <summary>
        /// IDs of refinements and corresponding values to filter the product results. These
        /// identifers
        /// are dependent on the data source and are typically described in a ProductIndex.
        /// </summary>
        [JsonProperty("refinements")]
        public object Refinements { get; set; }

        /// <summary>
        /// A key representing the type of sort to be applied to the product query. The possible
        /// values are dependent on the data source and are typically described in a ProductIndex.
        /// </summary>
        [JsonProperty("sortBy", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string SortBy { get; set; }

        /// <summary>
        /// An array of tags for which related products should be returned.
        /// </summary>
        [JsonProperty("tags", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Tags { get; set; }
    }

    /// <summary>
    /// Encapsulation of suggested brands, categories, and products for a specified query.
    /// </summary>
    public partial class SearchSuggestion
    {
        /// <summary>
        /// Suggested brands for the specified query.
        /// </summary>
        [JsonProperty("brandSuggestions", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public BrandSuggestions BrandSuggestions { get; set; }

        /// <summary>
        /// Suggested categories for the specified query.
        /// </summary>
        [JsonProperty("categorySuggestions", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CategorySuggestions CategorySuggestions { get; set; }

        /// <summary>
        /// Suggested products for the specified query.
        /// </summary>
        [JsonProperty("productSuggestions", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ProductSuggestions ProductSuggestions { get; set; }

        /// <summary>
        /// The query that triggered the search suggestions.
        /// </summary>
        [JsonProperty("query", Required = Required.Always)]
        public string Query { get; set; }
    }

    /// <summary>
    /// Information about brands that are to be suggested as a user executes a search.
    ///
    /// Suggested brands for the specified query.
    /// </summary>
    public partial class BrandSuggestions
    {
        /// <summary>
        /// An array of suggested brand titles.
        /// </summary>
        [JsonProperty("brands", Required = Required.Always)]
        public List<BrandSuggestion> Brands { get; set; }
    }

    /// <summary>
    /// Information about a brand that is to be suggested as a user executes a search.
    /// </summary>
    public partial class BrandSuggestion
    {
        /// <summary>
        /// The title of the suggested brand.
        /// </summary>
        [JsonProperty("title", Required = Required.Always)]
        public string Title { get; set; }
    }

    /// <summary>
    /// Information about categories that are to be suggested as a user executes a search.
    ///
    /// Suggested categories for the specified query.
    /// </summary>
    public partial class CategorySuggestions
    {
        /// <summary>
        /// An array of suggested category metadata.
        /// </summary>
        [JsonProperty("categories", Required = Required.Always)]
        public List<CategorySuggestion> Categories { get; set; }
    }

    /// <summary>
    /// Information about a category that is to be suggested as a user executes a search.
    /// </summary>
    public partial class CategorySuggestion
    {
        /// <summary>
        /// A unique identifier for a suggested category.
        /// </summary>
        [JsonProperty("categoryId", Required = Required.Always)]
        public string CategoryId { get; set; }

        /// <summary>
        /// The title of a suggested category.
        /// </summary>
        [JsonProperty("title", Required = Required.Always)]
        public string Title { get; set; }
    }

    /// <summary>
    /// Information about products that are to be suggested as a user executes a search.
    ///
    /// Suggested products for the specified query.
    /// </summary>
    public partial class ProductSuggestions
    {
        /// <summary>
        /// An array of suggested product metadata.
        /// </summary>
        [JsonProperty("products", Required = Required.Always)]
        public List<ProductSuggestion> Products { get; set; }
    }

    /// <summary>
    /// Information about a product that is to be suggested as a user executes a search.
    /// </summary>
    public partial class ProductSuggestion
    {
        /// <summary>
        /// The suggested product's identifier.
        /// </summary>
        [JsonProperty("productId", Required = Required.Always)]
        public string ProductId { get; set; }

        /// <summary>
        /// The name of the suggested product.
        /// </summary>
        [JsonProperty("title", Required = Required.Always)]
        public string Title { get; set; }
    }

    /// <summary>
    /// Metadata about a session token that is used to verify a user's authentication status.
    /// </summary>
    public partial class SessionToken
    {
        /// <summary>
        /// The date and time at which the token will expire. This value should be able to be parsed
        /// into a JavaScript Date object.
        /// </summary>
        [JsonProperty("expiresAt", Required = Required.Always)]
        public DateTimeOffset ExpiresAt { get; set; }

        /// <summary>
        /// An OAuth token granting access to a privileged application. Note that OAuth does not
        /// specify
        /// the format of a token, making it application-specific.
        /// </summary>
        [JsonProperty("token", Required = Required.AllowNull)]
        public object Token { get; set; }
    }

    /// <summary>
    /// Interface that prescribes options that can be provided to the commerce source method to
    /// set address options on a shipment.
    /// </summary>
    public partial class ShipmentAddressOptions
    {
        /// <summary>
        /// Line-item information about an address to be associated with a shipment.
        /// </summary>
        [JsonProperty("address", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Address Address { get; set; }

        /// <summary>
        /// An identifier corresponding to an address to be associated with a shipment.
        /// </summary>
        [JsonProperty("addressId", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string AddressId { get; set; }

        /// <summary>
        /// An identifier corresponding to the cart in which the shipment is contained.
        /// </summary>
        [JsonProperty("cartId", Required = Required.Always)]
        public string CartId { get; set; }

        /// <summary>
        /// An identifier corresponding to the shipment in which the address should be associated.
        /// </summary>
        [JsonProperty("shipmentId", Required = Required.Always)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Whether the specified address should be used as the billing address for the shipment.
        /// </summary>
        [JsonProperty("useAsBilling", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseAsBilling { get; set; }
    }

    /// <summary>
    /// Interface to prescribe the requred parameters to add a shipping method to a shipment.
    /// </summary>
    public partial class ShipmentMethodOptions
    {
        /// <summary>
        /// An identifier corresponding to the cart in which the shipment is contained.
        /// </summary>
        [JsonProperty("cartId", Required = Required.Always)]
        public string CartId { get; set; }

        /// <summary>
        /// An identifier corresponding to the shipping method which is to be applied to the shipment.
        /// </summary>
        [JsonProperty("methodId", Required = Required.Always)]
        public string MethodId { get; set; }

        /// <summary>
        /// An identifier corresponding to the shipment which is to receive the specified method.
        /// </summary>
        [JsonProperty("shipmentId", Required = Required.Always)]
        public string ShipmentId { get; set; }
    }

    /// <summary>
    /// Interface representing the response when querying available shipping methods for an order.
    /// </summary>
    public partial class ShippingMethodResponse
    {
        /// <summary>
        /// An identifier corresponding to the shipping method that should be selected by default.
        /// </summary>
        [JsonProperty("defaultMethodId", Required = Required.Always)]
        public string DefaultMethodId { get; set; }

        /// <summary>
        /// An array of all applicable shipping methods for an order.
        /// </summary>
        [JsonProperty("shippingMethods", Required = Required.Always)]
        public List<ShippingMethod> ShippingMethods { get; set; }
    }

    /// <summary>
    /// Basic information about a product that is reusable across interfaces.
    /// </summary>
    public partial class BaseProduct
    {
        /// <summary>
        /// Whether or not the product is available. If undefined the product is assumed to
        /// be available.
        /// </summary>
        [JsonProperty("available", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Available { get; set; }

        /// <summary>
        /// The brand or manufacturer of a product.
        /// </summary>
        [JsonProperty("brand", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Brand { get; set; }

        /// <summary>
        /// A description of the product.
        /// </summary>
        [JsonProperty("description", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// A SEO slug for the product. Used as a human-readable portion of the URL
        /// to access the product.
        /// </summary>
        [JsonProperty("handle", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Handle { get; set; }

        /// <summary>
        /// An array of images of the product.
        /// </summary>
        [JsonProperty("images", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Image> Images { get; set; }

        /// <summary>
        /// The current inventory for the product.
        /// </summary>
        [JsonProperty("inventory", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Inventory Inventory { get; set; }

        /// <summary>
        /// An array of options for the product. For example a 1 Year Warranty.
        /// </summary>
        [JsonProperty("options", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Option> Options { get; set; }

        /// <summary>
        /// The original price of the product.
        /// </summary>
        [JsonProperty("originalPrice", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue OriginalPrice { get; set; }

        /// <summary>
        /// The current offer price of the product.
        /// </summary>
        [JsonProperty("price", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue Price { get; set; }

        /// <summary>
        /// The reviews for this product.
        /// </summary>
        [JsonProperty("review", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ReviewDetails Review { get; set; }

        /// <summary>
        /// The name of the product.
        /// </summary>
        [JsonProperty("title", Required = Required.Always)]
        public string Title { get; set; }

        /// <summary>
        /// An array of variants for the product. For example alternative sizes or colors.
        /// </summary>
        [JsonProperty("variants", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Variant> Variants { get; set; }
    }

    /// <summary>
    /// Information about a cart. In Demandware transactions the cart is the base unit of a
    /// transaction and as such can contain shipping and payment information in addition
    /// to a list of products.
    /// </summary>
    public partial class Cart
    {
        /// <summary>
        /// The billing address associated with an order.
        /// </summary>
        [JsonProperty("billingAddress", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Address BillingAddress { get; set; }

        /// <summary>
        /// Information about a customer making an order.
        /// </summary>
        [JsonProperty("customerInfo", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CustomerAccount CustomerInfo { get; set; }

        /// <summary>
        /// A unique identifier for a cart.
        /// </summary>
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// An array of products of which the user has added to the cart.
        /// </summary>
        [JsonProperty("items", Required = Required.Always)]
        public List<CartItem> Items { get; set; }

        /// <summary>
        /// An array of payments describing the methods used to pay for an order.
        /// </summary>
        [JsonProperty("payments", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Payment> Payments { get; set; }

        /// <summary>
        /// An array of promo codes that have been added to an order.
        /// </summary>
        [JsonProperty("promos", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Promo> Promos { get; set; }

        /// <summary>
        /// An array of shipments for the order. Orders with more than one item can be sent via
        /// multiple
        /// shipments, each having its own tracking information.
        /// </summary>
        [JsonProperty("shipments", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Shipment> Shipments { get; set; }

        /// <summary>
        /// The cost for shipping an order.
        /// </summary>
        [JsonProperty("shipping", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue Shipping { get; set; }

        /// <summary>
        /// The total cost of the products in the cart before shipping feeds and taxes have
        /// been added.
        /// </summary>
        [JsonProperty("subtotal", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue Subtotal { get; set; }

        /// <summary>
        /// The total amount of taxes for an order.
        /// </summary>
        [JsonProperty("tax", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue Tax { get; set; }

        /// <summary>
        /// The total cost of an order including taxes and fees.
        /// </summary>
        [JsonProperty("total", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue Total { get; set; }
    }

    /// <summary>
    /// Information about a single item in a cart.
    /// </summary>
    public partial class CartItem
    {
        /// <summary>
        /// Whether or not the product is available. If undefined the product is assumed to
        /// be available.
        /// </summary>
        [JsonProperty("available", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Available { get; set; }

        /// <summary>
        /// The brand or manufacturer of a product.
        /// </summary>
        [JsonProperty("brand", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Brand { get; set; }

        /// <summary>
        /// A description of the product.
        /// </summary>
        [JsonProperty("description", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// A SEO slug for the product. Used as a human-readable portion of the URL
        /// to access the product.
        /// </summary>
        [JsonProperty("handle", Required = Required.Always)]
        public string Handle { get; set; }

        /// <summary>
        /// An array of images of the product.
        /// </summary>
        [JsonProperty("images", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Image> Images { get; set; }

        /// <summary>
        /// The current inventory for the product.
        /// </summary>
        [JsonProperty("inventory", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Inventory Inventory { get; set; }

        /// <summary>
        /// A unique identifier for a cart item. This is typically separate from the product
        /// ID because a cart item describes a product as well as its quantity within a cart.
        /// </summary>
        [JsonProperty("itemId", Required = Required.Always)]
        public string ItemId { get; set; }

        /// <summary>
        /// Additional information about a cart item such as a description or disclaimer.
        /// </summary>
        [JsonProperty("itemText", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string ItemText { get; set; }

        /// <summary>
        /// An array of options for the product. For example a 1 Year Warranty.
        /// </summary>
        [JsonProperty("options", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Option> Options { get; set; }

        /// <summary>
        /// The original price of the product.
        /// </summary>
        [JsonProperty("originalPrice", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue OriginalPrice { get; set; }

        /// <summary>
        /// The current offer price of the product.
        /// </summary>
        [JsonProperty("price", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue Price { get; set; }

        /// <summary>
        /// The identifier of the product which is represented by the cart item.
        /// </summary>
        [JsonProperty("productId", Required = Required.Always)]
        public string ProductId { get; set; }

        /// <summary>
        /// An array of promotions which apply to the cart item.
        /// </summary>
        [JsonProperty("promotions", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<CartPromo> Promotions { get; set; }

        /// <summary>
        /// The quantity of the specified product within the cart.
        /// </summary>
        [JsonProperty("quantity", Required = Required.Always)]
        public decimal Quantity { get; set; }

        /// <summary>
        /// The reviews for this product.
        /// </summary>
        [JsonProperty("review", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ReviewDetails Review { get; set; }

        /// <summary>
        /// The name of the product.
        /// </summary>
        [JsonProperty("title", Required = Required.Always)]
        public string Title { get; set; }

        /// <summary>
        /// The total price of a line item in the cart. This is the cost of the product
        /// multiplied by its quantity.
        /// </summary>
        [JsonProperty("totalPrice", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue TotalPrice { get; set; }

        /// <summary>
        /// An array of variants for the product. For example alternative sizes or colors.
        /// </summary>
        [JsonProperty("variants", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Variant> Variants { get; set; }
    }

    /// <summary>
    /// Information about a promotion that has been applied to an order.
    /// </summary>
    public partial class Promo
    {
        /// <summary>
        /// The code associated with the promotion.
        /// </summary>
        [JsonProperty("code", Required = Required.Always)]
        public string Code { get; set; }

        /// <summary>
        /// A unique identifier for the promo.
        /// </summary>
        [JsonProperty("id", Required = Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The title of the promotion.
        /// </summary>
        [JsonProperty("title", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Whether the promotion is valid.
        /// </summary>
        [JsonProperty("valid", Required = Required.Always)]
        public bool Valid { get; set; }

        /// <summary>
        /// The value of the promotion. This is typically the savings on the order due to the
        /// promotion.
        /// </summary>
        [JsonProperty("value", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyValue Value { get; set; }
    }

    /// <summary>
    /// `cache` determines how the requests handles potentially cached
    /// responses.
    ///
    /// - `default`: Use the native platforms default strategy. `useProtocolCachePolicy` on iOS.
    ///
    /// - `reload`: The data for the URL will be loaded from the originating source.
    /// No existing cache data should be used to satisfy a URL load request.
    ///
    /// - `force-cache`: The existing cached data will be used to satisfy the request,
    /// regardless of its age or expiration date. If there is no existing data in the cache
    /// corresponding the request, the data is loaded from the originating source.
    ///
    /// - `only-if-cached`: The existing cache data will be used to satisfy a request, regardless
    /// of
    /// its age or expiration date. If there is no existing data in the cache corresponding
    /// to a URL load request, no attempt is made to load the data from the originating source,
    /// and the load is considered to have failed.
    /// </summary>
    public enum Cache { Default, ForceCache, OnlyIfCached, Reload };

    /// <summary>
    /// The customer's gender.
    ///
    /// Value in the distribution
    /// </summary>
    public partial struct Gender
    {
        public decimal? Double;
        public string String;

        public static implicit operator Gender(decimal Double) => new Gender { Double = Double };
        public static implicit operator Gender(string String) => new Gender { String = String };
    }

    /// <summary>
    /// Value for the context
    /// </summary>
    public partial struct Value
    {
        public string String;
        public List<string> StringArray;

        public static implicit operator Value(string String) => new Value { String = String };
        public static implicit operator Value(List<string> StringArray) => new Value { StringArray = StringArray };
    }

    public partial class Person
    {
        public static Person FromJson(string json) => JsonConvert.DeserializeObject<Person>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class Address
    {
        public static Address FromJson(string json) => JsonConvert.DeserializeObject<Address>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ApplicablePaymentCard
    {
        public static ApplicablePaymentCard FromJson(string json) => JsonConvert.DeserializeObject<ApplicablePaymentCard>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ApplicablePayment
    {
        public static ApplicablePayment FromJson(string json) => JsonConvert.DeserializeObject<ApplicablePayment>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class BillingAddressOptions
    {
        public static BillingAddressOptions FromJson(string json) => JsonConvert.DeserializeObject<BillingAddressOptions>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class CartQuery
    {
        public static CartQuery FromJson(string json) => JsonConvert.DeserializeObject<CartQuery>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class Image
    {
        public static Image FromJson(string json) => JsonConvert.DeserializeObject<Image>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class Category
    {
        public static Category FromJson(string json) => JsonConvert.DeserializeObject<Category>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class CategoryQuery
    {
        public static CategoryQuery FromJson(string json) => JsonConvert.DeserializeObject<CategoryQuery>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class CustomerAddress
    {
        public static CustomerAddress FromJson(string json) => JsonConvert.DeserializeObject<CustomerAddress>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class PaymentBankAccount
    {
        public static PaymentBankAccount FromJson(string json) => JsonConvert.DeserializeObject<PaymentBankAccount>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class PaymentCard
    {
        public static PaymentCard FromJson(string json) => JsonConvert.DeserializeObject<PaymentCard>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class BasePaymentMethod
    {
        public static BasePaymentMethod FromJson(string json) => JsonConvert.DeserializeObject<BasePaymentMethod>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class PaymentMethod
    {
        public static PaymentMethod FromJson(string json) => JsonConvert.DeserializeObject<PaymentMethod>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public class AuthType
    {
        public static decimal FromJson(string json) => JsonConvert.DeserializeObject<decimal>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class CustomerAccount
    {
        public static CustomerAccount FromJson(string json) => JsonConvert.DeserializeObject<CustomerAccount>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class CustomerInfoOptions
    {
        public static CustomerInfoOptions FromJson(string json) => JsonConvert.DeserializeObject<CustomerInfoOptions>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class BaseGiftOptions
    {
        public static BaseGiftOptions FromJson(string json) => JsonConvert.DeserializeObject<BaseGiftOptions>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class GiftOptions
    {
        public static GiftOptions FromJson(string json) => JsonConvert.DeserializeObject<GiftOptions>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class LoginOptions
    {
        public static LoginOptions FromJson(string json) => JsonConvert.DeserializeObject<LoginOptions>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class OptionValue
    {
        public static OptionValue FromJson(string json) => JsonConvert.DeserializeObject<OptionValue>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class Option
    {
        public static Option FromJson(string json) => JsonConvert.DeserializeObject<Option>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class Payment
    {
        public static Payment FromJson(string json) => JsonConvert.DeserializeObject<Payment>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ProductItem
    {
        public static ProductItem FromJson(string json) => JsonConvert.DeserializeObject<ProductItem>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ShippingMethodPromo
    {
        public static ShippingMethodPromo FromJson(string json) => JsonConvert.DeserializeObject<ShippingMethodPromo>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ShippingMethod
    {
        public static ShippingMethod FromJson(string json) => JsonConvert.DeserializeObject<ShippingMethod>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class Shipment
    {
        public static Shipment FromJson(string json) => JsonConvert.DeserializeObject<Shipment>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class Order
    {
        public static Order FromJson(string json) => JsonConvert.DeserializeObject<Order>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class Pageable
    {
        public static Pageable FromJson(string json) => JsonConvert.DeserializeObject<Pageable>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class SortingOption
    {
        public static SortingOption FromJson(string json) => JsonConvert.DeserializeObject<SortingOption>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class RefinementValue
    {
        public static RefinementValue FromJson(string json) => JsonConvert.DeserializeObject<RefinementValue>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class Refinement
    {
        public static Refinement FromJson(string json) => JsonConvert.DeserializeObject<Refinement>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ProductIndex
    {
        public static ProductIndex FromJson(string json) => JsonConvert.DeserializeObject<ProductIndex>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ProductQuery
    {
        public static ProductQuery FromJson(string json) => JsonConvert.DeserializeObject<ProductQuery>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class Promo
    {
        public static Promo FromJson(string json) => JsonConvert.DeserializeObject<Promo>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class BrandSuggestions
    {
        public static BrandSuggestions FromJson(string json) => JsonConvert.DeserializeObject<BrandSuggestions>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class BrandSuggestion
    {
        public static BrandSuggestion FromJson(string json) => JsonConvert.DeserializeObject<BrandSuggestion>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class CategorySuggestions
    {
        public static CategorySuggestions FromJson(string json) => JsonConvert.DeserializeObject<CategorySuggestions>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class CategorySuggestion
    {
        public static CategorySuggestion FromJson(string json) => JsonConvert.DeserializeObject<CategorySuggestion>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ProductSuggestions
    {
        public static ProductSuggestions FromJson(string json) => JsonConvert.DeserializeObject<ProductSuggestions>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ProductSuggestion
    {
        public static ProductSuggestion FromJson(string json) => JsonConvert.DeserializeObject<ProductSuggestion>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class SearchSuggestion
    {
        public static SearchSuggestion FromJson(string json) => JsonConvert.DeserializeObject<SearchSuggestion>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class SessionToken
    {
        public static SessionToken FromJson(string json) => JsonConvert.DeserializeObject<SessionToken>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ShipmentAddressOptions
    {
        public static ShipmentAddressOptions FromJson(string json) => JsonConvert.DeserializeObject<ShipmentAddressOptions>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ShipmentMethodOptions
    {
        public static ShipmentMethodOptions FromJson(string json) => JsonConvert.DeserializeObject<ShipmentMethodOptions>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ShippingMethodResponse
    {
        public static ShippingMethodResponse FromJson(string json) => JsonConvert.DeserializeObject<ShippingMethodResponse>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class Inventory
    {
        public static Inventory FromJson(string json) => JsonConvert.DeserializeObject<Inventory>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class Variant
    {
        public static Variant FromJson(string json) => JsonConvert.DeserializeObject<Variant>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class BaseProduct
    {
        public static BaseProduct FromJson(string json) => JsonConvert.DeserializeObject<BaseProduct>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class Product
    {
        public static Product FromJson(string json) => JsonConvert.DeserializeObject<Product>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class Cart
    {
        public static Cart FromJson(string json) => JsonConvert.DeserializeObject<Cart>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class CartItem
    {
        public static CartItem FromJson(string json) => JsonConvert.DeserializeObject<CartItem>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class CartPromo
    {
        public static CartPromo FromJson(string json) => JsonConvert.DeserializeObject<CartPromo>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class CurrencyValue
    {
        public static CurrencyValue FromJson(string json) => JsonConvert.DeserializeObject<CurrencyValue>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ReviewDetails
    {
        public static ReviewDetails FromJson(string json) => JsonConvert.DeserializeObject<ReviewDetails>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class Review
    {
        public static Review FromJson(string json) => JsonConvert.DeserializeObject<Review>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ReviewContext
    {
        public static ReviewContext FromJson(string json) => JsonConvert.DeserializeObject<ReviewContext>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ReviewDimension
    {
        public static ReviewDimension FromJson(string json) => JsonConvert.DeserializeObject<ReviewDimension>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ReviewBadge
    {
        public static ReviewBadge FromJson(string json) => JsonConvert.DeserializeObject<ReviewBadge>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ReviewUser
    {
        public static ReviewUser FromJson(string json) => JsonConvert.DeserializeObject<ReviewUser>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ReviewFeedback
    {
        public static ReviewFeedback FromJson(string json) => JsonConvert.DeserializeObject<ReviewFeedback>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ReviewStatistics
    {
        public static ReviewStatistics FromJson(string json) => JsonConvert.DeserializeObject<ReviewStatistics>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ReviewDistribution
    {
        public static ReviewDistribution FromJson(string json) => JsonConvert.DeserializeObject<ReviewDistribution>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ReviewContextDistribution
    {
        public static ReviewContextDistribution FromJson(string json) => JsonConvert.DeserializeObject<ReviewContextDistribution>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ReviewDimensionAverage
    {
        public static ReviewDimensionAverage FromJson(string json) => JsonConvert.DeserializeObject<ReviewDimensionAverage>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public partial class ReviewSummary
    {
        public static ReviewSummary FromJson(string json) => JsonConvert.DeserializeObject<ReviewSummary>(json, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Person self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this Address self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ApplicablePaymentCard self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ApplicablePayment self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this BillingAddressOptions self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this CartQuery self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this Image self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this Category self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this CategoryQuery self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this CustomerAddress self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this PaymentBankAccount self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this PaymentCard self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this BasePaymentMethod self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this PaymentMethod self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this decimal self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this CustomerAccount self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this CustomerInfoOptions self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this BaseGiftOptions self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this GiftOptions self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this LoginOptions self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this OptionValue self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this Option self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this Payment self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ProductItem self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ShippingMethodPromo self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ShippingMethod self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this Shipment self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this Order self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this Pageable self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this SortingOption self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this RefinementValue self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this Refinement self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ProductIndex self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ProductQuery self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this Promo self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this BrandSuggestions self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this BrandSuggestion self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this CategorySuggestions self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this CategorySuggestion self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ProductSuggestions self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ProductSuggestion self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this SearchSuggestion self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this SessionToken self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ShipmentAddressOptions self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ShipmentMethodOptions self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ShippingMethodResponse self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this Inventory self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this Variant self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this BaseProduct self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this Product self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this Cart self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this CartItem self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this CartPromo self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this CurrencyValue self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ReviewDetails self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this Review self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ReviewContext self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ReviewDimension self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ReviewBadge self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ReviewUser self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ReviewFeedback self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ReviewStatistics self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ReviewDistribution self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ReviewContextDistribution self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ReviewDimensionAverage self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
        public static string ToJson(this ReviewSummary self) => JsonConvert.SerializeObject(self, EPiServer.Reference.Commerce.Site.Features.Shared.FlagshipViewModels.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CacheConverter.Singleton,
                GenderConverter.Singleton,
                ValueConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CacheConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Cache) || t == typeof(Cache?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "default":
                    return Cache.Default;
                case "force-cache":
                    return Cache.ForceCache;
                case "only-if-cached":
                    return Cache.OnlyIfCached;
                case "reload":
                    return Cache.Reload;
            }
            throw new Exception("Cannot unmarshal type Cache");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Cache)untypedValue;
            switch (value)
            {
                case Cache.Default:
                    serializer.Serialize(writer, "default");
                    return;
                case Cache.ForceCache:
                    serializer.Serialize(writer, "force-cache");
                    return;
                case Cache.OnlyIfCached:
                    serializer.Serialize(writer, "only-if-cached");
                    return;
                case Cache.Reload:
                    serializer.Serialize(writer, "reload");
                    return;
            }
            throw new Exception("Cannot marshal type Cache");
        }

        public static readonly CacheConverter Singleton = new CacheConverter();
    }

    internal class GenderConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Gender) || t == typeof(Gender?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<decimal>(reader);
                    return new Gender { Double = doubleValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Gender { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type Gender");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Gender)untypedValue;
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type Gender");
        }

        public static readonly GenderConverter Singleton = new GenderConverter();
    }

    internal class ValueConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Value) || t == typeof(Value?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Value { String = stringValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<string>>(reader);
                    return new Value { StringArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Value");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Value)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.StringArray != null)
            {
                serializer.Serialize(writer, value.StringArray);
                return;
            }
            throw new Exception("Cannot marshal type Value");
        }

        public static readonly ValueConverter Singleton = new ValueConverter();
    }
}
